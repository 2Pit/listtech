// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalBool {
    #[prost(bool, optional, tag = "1")]
    pub value: ::core::option::Option<bool>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalInt64 {
    #[prost(int64, optional, tag = "1")]
    pub value: ::core::option::Option<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalUInt64 {
    #[prost(uint64, optional, tag = "1")]
    pub value: ::core::option::Option<u64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalDouble {
    #[prost(double, optional, tag = "1")]
    pub value: ::core::option::Option<f64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalString {
    #[prost(string, optional, tag = "1")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalBytes {
    #[prost(bytes = "vec", optional, tag = "1")]
    pub value: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct OptionalTimestampMs {
    #[prost(int64, optional, tag = "1")]
    pub value: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoolList {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalBool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Int64List {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalInt64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UInt64List {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalUInt64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoubleList {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalDouble>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StringList {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalString>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BytesList {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalBytes>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimestampList {
    #[prost(message, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<OptionalTimestampMs>,
}
