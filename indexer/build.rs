use std::fs;
use std::path::Path;
use std::process::Command;

fn main() {
    let out_dir = std::env::var("OUT_DIR").unwrap();

    // Сборка Swagger JSON из .proto
    let status = Command::new("protoc")
        .args([
            "-Iproto",
            "-I../core/proto/third_party",
            "--openapiv2_out",
            &out_dir,
            "--openapiv2_opt",
            "logtostderr=true",
            "proto/api.proto",
        ])
        .status()
        .expect("failed to run protoc for swagger generation");

    if !status.success() {
        panic!("protoc failed with status: {:?}", status);
    }

    // Копируем swagger.json в core/static/swagger-ui
    let swagger_src = format!("{}/api.swagger.json", out_dir);
    let swagger_dest = "../core/static/swagger-ui/swagger.json";

    if !Path::new(&swagger_src).exists() {
        panic!(
            "Expected swagger.json at {}, but it was not generated by protoc",
            swagger_src
        );
    }

    fs::copy(&swagger_src, swagger_dest).expect("Failed to copy swagger.json to static dir");

    println!("cargo:rerun-if-changed={}", swagger_src);

    // Обновление при изменениях .proto
    println!("cargo:rerun-if-changed=proto/api.proto");
    println!("cargo:rerun-if-changed=../core/proto/third_party/google/api/annotations.proto");
    println!("cargo:rerun-if-changed=../core/proto/third_party/google/api/http.proto");
    println!("cargo:rerun-if-changed=../core/proto/third_party/google/protobuf/descriptor.proto");
}
